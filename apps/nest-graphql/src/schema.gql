directive @embedded on OBJECT
directive @collection(name: String!) on OBJECT
directive @index(name: String!) on FIELD_DEFINITION
directive @resolver(
  name: String
  paginated: Boolean! = false
) on FIELD_DEFINITION
directive @relation(name: String) on FIELD_DEFINITION
directive @unique(index: String) on FIELD_DEFINITION
type Cars {
  name: String
  # The document's ID.
  _id: ID!
  manufacturer: String
  engine: Engine
  # The document's timestamp.
  _ts: Long!
}

# Allow manipulating the relationship between the types 'Cars' and 'Engine' using the field 'Cars.engine'.
input CarsEngineRelation {
  # Create a document of type 'Engine' and associate it with the current document.
  create: EngineInput
  # Connect a document of type 'Engine' with the current document using its ID.
  connect: ID
  # If true, disconnects this document from 'Engine'
  disconnect: Boolean
}

# 'Cars' input values
input CarsInput {
  engine: CarsEngineRelation
  manufacturer: String
  name: String
}

# The pagination object for elements of type 'Cars'.
type CarsPage {
  # The elements of type 'Cars' in this page.
  data: [Cars]!
  # A cursor for elements coming after the current page.
  after: String
  # A cursor for elements coming before the current page.
  before: String
}

scalar Date

type Engine {
  torque: Int
  name: String
  # The document's ID.
  _id: ID!
  horsePower: Int
  manufacturer: String
  displacement: Int
  # The document's timestamp.
  _ts: Long!
}

# 'Engine' input values
input EngineInput {
  displacement: Int
  horsePower: Int
  manufacturer: String
  name: String
  torque: Int
}

# The pagination object for elements of type 'Engine'.
type EnginePage {
  # The elements of type 'Engine' in this page.
  data: [Engine]!
  # A cursor for elements coming after the current page.
  after: String
  # A cursor for elements coming before the current page.
  before: String
}

# The `Long` scalar type
# represents non-fractional signed whole numeric values.
# Long can represent values between -(2^63) and 2^63 - 1.
scalar Long

type Mutation {
  # Create a new document in the collection of 'Cars'
  createCars(
    # 'Cars' input values
    data: CarsInput!
  ): Cars!
  # Create a new document in the collection of 'Engine'
  createEngine(
    # 'Engine' input values
    data: EngineInput!
  ): Engine!
  # Update an existing document in the collection of 'Cars'
  updateCars(
    # The 'Cars' document's ID
    id: ID!
    # 'Cars' input values
    data: CarsInput!
  ): Cars
  # Delete an existing document in the collection of 'Cars'
  deleteCars(
    # The 'Cars' document's ID
    id: ID!
  ): Cars
  # Update an existing document in the collection of 'Engine'
  updateEngine(
    # The 'Engine' document's ID
    id: ID!
    # 'Engine' input values
    data: EngineInput!
  ): Engine
  # Delete an existing document in the collection of 'Engine'
  deleteEngine(
    # The 'Engine' document's ID
    id: ID!
  ): Engine
}

type Query {
  # Find a document from the collection of 'Cars' by its id.
  findCarsByID(
    # The 'Cars' document's ID
    id: ID!
  ): Cars
  # Find a document from the collection of 'Engine' by its id.
  findEngineByID(
    # The 'Engine' document's ID
    id: ID!
  ): Engine
  cars(
    # The number of items to return per page.
    _size: Int
    # The pagination cursor.
    _cursor: String
  ): CarsPage!
  engines(
    # The number of items to return per page.
    _size: Int
    # The pagination cursor.
    _cursor: String
  ): EnginePage!
}

scalar Time

